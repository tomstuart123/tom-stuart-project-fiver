{"version":3,"sources":["assets/nigel-tadyanehondo-pXf4OH65OhE-unsplash.jpg","firebase/firebase.js","formComponents/MessageInput.js","formComponents/TotalMessages.js","pages/PublicChat.js","formComponents/TextInput.js","pages/LandingPage.js","pages/RoomPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MessageInput","className","onSubmit","this","props","submitStore","htmlFor","name","autoComplete","id","type","placeholder","value","userInput","onChange","trackChanges","Component","TotalMessages","hidden","rightText","userID","userMessage","firebaseKey","onClick","cancelMessage","sendDate","PublicChat","href","pastRoomNames","map","room","switchRoom","statusChat","goBackToStart","userName","messageList","messageObject","currentTime","removeMessage","userFirebaseKey","handleChange","handleSubmit","class","TextInput","inputField","LandingPage","scrollDown","signOrLogin","publicJoin","for","signUpOrLogin","switchSign","src","landingImage","alt","RoomPage","createRoom","joinRoom","App","componentDidMount","localStorage","userSignedIn","setState","userPW","findRoomsUserIsIn","state","e","preventDefault","pw","userInput2","signUp","login","users","database","ref","Date","now","toString","userObject","signUpTime","on","usersCleaned","val","user","stop","setTimeout","alert","pushID","push","key","child","update","setItem","testArray","length","adjustPublicJoinStatus","groupChatStart","window","scrollBy","userNameResponse","chatroom","chatroomPush","roomName","messageArray","message","event","target","chatrooms","enqueuedMessage","newCurrentTime","slice","element","document","querySelector","scrollIntoView","remove","clicked","privateJoin","privateCreate","clear","chatroomsCleaned","chatRoomObject","matchOnce","data","chatroomsArray","finalRoomsArray","usersAndRooms","rooms","messages","includes","toLowerCase","cleanedFinalArray","Set","hideClass","hideClassName","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b76d6c55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nigel-tadyanehondo-pXf4OH65OhE-unsplash.a1bc7900.jpg\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyAaI71MTS1gfeFk6RwBoLFf_eTTknSHlkw\",\n    authDomain: \"chat-app-52f62.firebaseapp.com\",\n    databaseURL: \"https://chat-app-52f62.firebaseio.com\",\n    projectId: \"chat-app-52f62\",\n    storageBucket: \"chat-app-52f62.appspot.com\",\n    messagingSenderId: \"762254551362\",\n    appId: \"1:762254551362:web:b3a0fa8d06c325962380db\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase\n","import React, { Component } from \"react\";\n\nclass MessageInput extends Component {\n    \n    render() {\n        return (\n            <div className=\"messageInput\">\n                <form onSubmit={this.props.submitStore} className='messageInputForm'>\n                    <label htmlFor='userMessage'></label>\n                    <input name='userMessage' autoComplete=\"off\"\n                    id='userMessage' type='text' placeholder='Your Message' value={this.props.userInput} className='userMessage' onChange={this.props.trackChanges} />\n                    <button onChange={this.props.trackChanges} type='submit'>Send</button>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default MessageInput;\n\n","import React, { Component } from \"react\";\n\nclass TotalMessages extends Component {\n\n    render() {\n        return (\n            <div className=\"totalMessages\" id={this.props.hidden}>\n                <div>\n                    \n                    <p className={this.props.rightText}>\n                        <span className='messageID'>{this.props.userID}</span>\n                    :\n                        <span className='messageText'>{this.props.userMessage}</span>\n                        <span className='deleteYou' id={this.props.firebaseKey} onClick={this.props.cancelMessage}><span className={this.props.userID} id={this.props.firebaseKey}>x</span></span>\n                    </p>\n                    <p id='dateText' className={this.props.rightText}>\n                        <span className='date'>{this.props.sendDate}</span>\n                    </p>\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default TotalMessages;\n\n","import React, { Component } from \"react\";\nimport MessageInput from '../formComponents/MessageInput';\nimport TotalMessages from '../formComponents/TotalMessages';\n\nclass PublicChat extends Component {\n\n    render() {\n        return (\n            <div className='page2'>\n                <div className='page2Side'>\n                    <div className='page2SideTop'>\n                        <h3><a href='index.html'>Chattr</a><a href={'https://tomstuart123.github.io/chat-test/'}><span className='accent2'>-3</span></a></h3> \n                        \n                    </div>\n                    <div className='page2SideBottom'>\n                    <p>Past Channels </p>\n                    {this.props.pastRoomNames.map((room) => {\n\n                        return (\n                            <a className='pastRooms' id={room} onClick={this.props.switchRoom}>{`- ${room}`}</a>\n                        )\n                    })\n                    }\n                    </div>\n                </div>\n                <div className='page2Main'>\n                <nav>\n                    <section className='wrapper '>\n                        <div>\n                            <h3 className='navAlt'> <a href='index.html'>Chattr</a> Room: {this.props.statusChat}\n\n                            </h3>\n                            <li onClick={this.props.goBackToStart}>{this.props.userName} sign out </li>\n                        </div>\n                    </section>\n                </nav>\n                <section className='wrapper'>\n                \n                <div className='messagesBox'>\n                    <div>\n                        {\n                        this.props.messageList.map((messageObject) => {\n                        if (messageObject.userID === this.props.userName) {\n                            return (\n                                <TotalMessages rightText={this.props.rightText} userID={messageObject.userID} userMessage={messageObject.userMessage} sendDate={messageObject.currentTime} cancelMessage={this.props.removeMessage} firebaseKey={messageObject.userFirebaseKey} />\n                            )\n                        } else {\n                            return (\n                                <TotalMessages userID={messageObject.userID} userMessage={messageObject.userMessage} sendDate={messageObject.currentTime} cancelMessage={this.props.removeMessage} firebaseKey={messageObject.userFirebaseKey} />\n                            )\n                        }\n                            \n                        })\n                        }\n                        {/* empty div so we can scroll to the newest message on message send */}\n                        <div className='lastMessage'></div>\n\n                    </div>\n                </div>\n                <MessageInput userInput={this.props.userInput} trackChanges={this.props.handleChange} submitStore={this.props.handleSubmit} />\n                    <p class='tipText'>Note - You can tell guest users from Members due to the 'guest' after their userName </p>\n                </section>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PublicChat;\n","import React, { Component } from \"react\";\n\nclass TextInput extends Component {\n    render() {\n        return (\n            <div className='signInForm'>\n                    <label htmlFor={this.props.className}></label>\n                    <input name='{this.props.className}' autoComplete=\"off\" id={this.props.className} type='text' placeholder={this.props.inputField} className={this.props.className} onChange={this.props.handleChange} />\n            </div>\n            )\n    }\n}\n\nexport default TextInput;\n\n\n","import React, { Component } from \"react\";\nimport TextInput from '../formComponents/TextInput';\nimport landingImage from '../assets/nigel-tadyanehondo-pXf4OH65OhE-unsplash.jpg';\n\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div className='landingPage'>\n                 <div className='landingPageTop'>      \n                    <nav>\n                        <section className='wrapper '>\n                            <div>\n                                <li className='logo logo-landing'> <a href=\"index.html\">Chattr</a><a href={'https://tomstuart123.github.io/chat-test/'}><span className='accent'>-3</span></a> </li>\n                                <li onClick={this.props.scrollDown}>{this.props.signOrLogin}</li>\n                            </div>\n                        </section>\n                    </nav>\n                    <section className='wrapper '>\n                    <h1> Virtual Chat for work, chill or play</h1>\n                        <form className='publicRoomInputForm' onSubmit={this.props.publicJoin}>\n                            <label for='name'></label>\n                            <TextInput name='name' inputField='Add name to trial as guest' className='publicJoin' handleChange={this.props.handleChange}/>\n                            <button type='submit' className='submitPublic'>Go to the Public Room</button>\n                        </form>\n                        <div className='scrollDownHolder'>\n                            <button className='scrollDown' onClick={this.props.scrollDown}>Sign up to Pro below</button>\n                        </div>\n                    </section>\n                </div>\n                <div className='landingPageBottom'> \n                    <section className='wrapper '>\n                        <h2> {this.props.signOrLogin} to create and join your own private channels</h2> \n                        <form className='signInForm' onSubmit={this.props.signUpOrLogin}>\n                            <label class='visuallyHidden' for='name'></label>\n                            <p name='name'>Add a UserName</p>\n                            <TextInput inputField='Name' className='signInName' handleChange={this.props.handleChange}/>\n                            <label class='visuallyHidden' for='password'></label>\n                            <p>Add a Random Key</p>\n                            <TextInput name='password' inputField='Your Memorable key' className='signInRandomKey'  handleChange={this.props.handleChange}/>\n                            <button type='submit' className={this.props.signOrLogin}>{this.props.signOrLogin}</button>\n                        \n                        </form>\n                        <button className='switchSign'onClick={this.props.switchSign}>Already done this? Switch to Login page</button>\n                        <div className='imageContainer'>\n                            <img src={landingImage} alt='sign saying how the user will sign up eventually'></img>\n                        </div>\n                    </section>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, { Component } from \"react\";\nimport TextInput from '../formComponents/TextInput';\n\n\nclass RoomPage extends Component {\n    render() {\n        return (\n            <div className='roomPage'>\n                <div className='roomPageTop'> \n                <nav>\n                    <section className='wrapper '>\n                        <div>\n                            <li className='logo logo-landing'> <a href=\"index.html\">Chattr</a><a href={'https://tomstuart123.github.io/chat-test/'}><span className='accent'>-3</span></a> </li>\n                            <li onClick={this.props.goBackToStart}>Sign Out of {this.props.userName}</li>\n                        </div>\n                    </section>\n                </nav>\n                <div>\n                    <section className='wrapper'>\n                        <h1>Hi {this.props.userName}! Welcome to your Chattr Lobby!</h1>\n                        <h3 className='introText'>This is your private space to help you get started </h3>\n                        <div className='roomPageForms'> \n                            <form className='createRoomInputForm' onSubmit={this.props.createRoom}>\n                                <h3>Create a new chat room</h3>\n                                <label class='visuallyHidden' for='createRoomName'></label>\n                                <TextInput name='createRoomName' inputField='Name for the new room' className='createRoom' handleChange={this.props.handleChange} />\n                                <button type='submit' className='submitRoom'>Create</button>\n                            </form>\n                            <form className='joinRoomInputForm' onSubmit={this.props.joinRoom}>\n                                <h3>Join an existing chat room</h3>\n                                <label class='visuallyHidden' for='joinRoomName'></label>\n                                <TextInput name='joinRoomName' inputField='Existing room name' className='joinRoom' handleChange={this.props.handleChange} />\n                                <button type='submit' className='submitJoin'>Join</button>\n                            </form>\n                        </div>\n                            <button onClick={this.props.scrollDown} className='existingRoomButton'> Tip: Your last chatrooms were called:  \n                            {\n                                this.props.pastRoomNames.map((room) => {\n                                    \n                                    return (\n                                        <span className='pastRooms'>{`- ${room}`}</span>\n                                    )\n                                })\n                                  \n                            }\n                            </button>\n                    </section>\n                </div> \n                </div>\n                \n            </div>\n            \n        )\n    }\n}\n\nexport default RoomPage;","import React, { Component } from \"react\";\nimport './App.css';\nimport firebase from './firebase/firebase';\nimport PublicChat from './pages/PublicChat';\nimport LandingPage from './pages/LandingPage';\nimport RoomPage from './pages/RoomPage';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      clicked: false,\n      messageList: [],\n      userInput: '',\n      userInput2: '',\n      userName: 'guest',\n      userPW: '',\n      hideClass: true,\n      hideClassName: '',\n      currentTime: '',\n      userFirebaseKey: '',\n      publicJoin: false,\n      privateJoin: false,\n      privateCreate: false,\n      switchSign: 'Sign up',\n      stop: false,\n      userSignedIn: false,\n      roomName: 'publicRoom',\n      pastRoomNames: [`You haven't chatted in other rooms rooms`],\n      rightText: 'rightText',\n    }\n  }\n\n  componentDidMount = () => {\n    // make sure that user stays signed in even on page reload. As soon as local storage sign in is updated, also update the userSignIn in state\n    if (localStorage.userSignedIn === 'true') {\n      this.setState({\n        userSignedIn: true,\n        userName: localStorage.userName,\n        userPW: localStorage.userPW,\n      })\n    }\n\n    // run function on page load to track which rooms the user is in\n    this.findRoomsUserIsIn();\n\n    // }\n  }\n\n  // LANDING PAGE FUNCTIONALITY AND FUNCTIONS\n\n  // function to allow on landing page button click the switch of text from sign up (user) to login (user)\n  switchSign = () => {\n    if (this.state.switchSign === 'Sign up') {\n      this.setState({\n        switchSign: 'Login',\n      })\n    } else {\n      this.setState({\n        switchSign: 'Sign up',\n      })\n    }\n  }\n\n  // depending on the login or sign up above, run a function to login user or sign up the user\n  signUpOrLogin = (e) => {\n    e.preventDefault();\n    let name = this.state.userInput;\n    let pw = this.state.userInput2;\n    if (this.state.switchSign === 'Sign up') {\n\n      this.signUp(name, pw)\n    } else if (this.state.switchSign === 'Login') {\n      this.login(name, pw)\n    }\n  }\n\n  // sign up funciton adds a user object with sign in details to firebase and runs various checks to stop (similar usernames being uploaded, no text input etc)\n  signUp = (name, pw) => {\n    // pull users area of firebase\n    const users = firebase.database().ref('users');\n    // pull current time \n    const currentTime = Date(Date.now()).toString();\n\n    // create object with details of sign up\n    const userObject = {\n      userID: name,\n      userPW: pw,\n      signUpTime: currentTime,\n    }\n    // check if someone already has this userID. This will stop people getting confused with who they are talking to\n    users.on('value', (users) => {\n\n      let usersCleaned = users.val();\n      for (let user in usersCleaned) {\n\n        if (usersCleaned[user].userID == name) {\n          this.setState({\n            stop: true,\n          })\n        }\n      }\n    })\n\n    // make sure the state above has finished before running\n    setTimeout(() => {\n      // only run if user has input both text fields\n      if (!pw || !name) {\n        alert('please fill both sign in fields')\n      }\n      // only run it if the stop status set above is set to false.\n      else if (this.state.stop === true) {\n        alert('sorry someone already has that user name. Try again.')\n        this.setState({\n          stop: false,\n        })\n      }\n      // this error shouldn't need to run, but just in case the user is back on the landing page whilst signed in, make them sign up as another user \n      else if (this.state.userSignedIn === true) {\n        alert('Already signed in I am afraid')\n      }\n\n      // If none of the above are true, push user to database  and update the state as well as local storage\n      else {\n        const pushID = users.push(userObject);\n        userObject.userFirebaseKey = pushID.key;\n        users.child(pushID.key).update(userObject);\n        this.setState({\n          userName: name,\n          userPW: pw,\n          userSignedIn: true,\n          userInput: '',\n        })\n\n        localStorage.setItem('userName', name);\n        localStorage.setItem('userPW', pw);\n        localStorage.setItem('userSignedIn', true)\n      }\n    }, 500);\n\n\n\n\n  }\n\n  // similar to the sign up function above but instead checks database for user input. If input aligns, sign them in as that user in local storage and state\n  login = (name, pw) => {\n    // This shouldn't need to run but just in case, highlight to user that they are already signed in\n    if (this.state.userSignedIn === true) {\n      alert('Already signed in. sign out when you can')\n      return\n    }\n\n    // check login details vs. database. If the same, then set \n    const users = firebase.database().ref('users');\n    users.on('value', (users) => {\n\n      let usersCleaned = users.val();\n      let testArray = []\n      for (let user in usersCleaned) {\n\n        if (usersCleaned[user].userID === name && usersCleaned[user].userPW.toString() === pw) {\n          this.setState({\n            userName: name,\n            userPW: pw,\n            userSignedIn: true,\n            userInput: '',\n          })\n          testArray.push('match')\n          localStorage.setItem('userName', name);\n          localStorage.setItem('userPW', pw);\n          localStorage.setItem('userSignedIn', true)\n        }\n      }\n      if (testArray.length === 0) {\n        alert('sorry, no username and ID matches those. Try again')\n      }\n\n    })\n  }\n\n  adjustPublicJoinStatus = (e) => {\n    e.preventDefault();\n    // already stored their input in userInput for storage on the 'join as guest' landing page button\n    let userName = this.state.userInput;\n\n    // set state to true as they are public joining\n    this.setState({\n      publicJoin: true,\n      userInput: '',\n    })\n    // run the group chat function but with details above set to public join so they don't join any private rooms\n    this.groupChatStart(userName);\n  }\n\n  // a universal scroll down function. The site never has more than two sections per page so this always scrolls the user's viewport to the second section\n  scrollDown = (e) => {\n    e.preventDefault();\n    window.scrollBy(0, 1000);\n  }\n\n  // MAIN CHAT FUNCTIONALITY \n\n  // The core funciton that creates the messaging page. This runs either for public guest chat, joining private rooms or creating private rooms\n  groupChatStart = (name) => {\n    // ask for user name and store in variable\n    let userNameResponse = name;\n\n    // Users who are signed in can be told apart as no user can have the same username. To stop clashes for guests though, add ('guest') to their name \n    if (this.state.userSignedIn === false) {\n      userNameResponse = userNameResponse + ' (guest)';\n    }\n\n    // pull firebase\n    const chatrooms = firebase.database().ref('chatrooms');\n    // always listen to firebase database chatroom messages. On changes to messages, update state. This state messageList is then appended to the page by various components in PublicChat.js\n    chatrooms.on('value', (chatroom) => {\n      const chatrooms = chatroom.val();\n      const currentRoom = this.state.roomName;\n      const chatroomPush = chatrooms[currentRoom];\n\n      let messageArray = [];\n      for (let message in chatroomPush) {\n        messageArray.push(chatroomPush[message])\n      }\n      // when chatroom changes, push the entire chatroom message to state\n      this.setState({\n        messageList: messageArray,\n        userName: userNameResponse,\n      })\n\n    })\n  }\n\n  // GENERAL TEXT INPUT FUNCTIONS \n\n  // Ensure that whenever any text input box is written in, the state of userINput is updated. We will use this data in handle submit below\n  handleChange = (event) => {\n    // when input text box changes, update state of the userInput dynamically\n\n    // if its the signIn part, update userInput one for usage\n    if (event.target.className === 'signInName') {\n      this.setState({\n        userInput: event.target.value\n      })\n      // if its the key part, update userInput one for usage\n\n    } else if (event.target.className === 'signInRandomKey') {\n      this.setState({\n        userInput2: event.target.value\n      })\n    }   // if its anything else, update userInput one for usage\n    else {\n      this.setState({\n        userInput: event.target.value\n      })\n    }\n  }\n\n  // On submit of any button (with text input), update firebase with the userInput written by the user in function above. \n  handleSubmit = (event) => {\n    event.preventDefault();\n    // set firebase object of chatroom\n    const chatrooms = firebase.database().ref('chatrooms');\n    // pull username and message \n    const enqueuedMessage = this.state.userInput;\n\n    // find latest time / date\n    const currentTime = Date(Date.now()).toString();\n    // strip of wasted GMT stuff from the data\n    const newCurrentTime = currentTime.slice(0, 25);\n\n    // create message box ready to go to firebase\n    const messageObject = {\n      userID: this.state.userName,\n      userMessage: enqueuedMessage,\n      currentTime: newCurrentTime,\n      userFirebaseKey: '',\n    }\n    // push message object to firebase in the 'current' room with publicRoom (guest room) as the default if message isn't empty\n    if (enqueuedMessage) {\n      // store the pushID given to us from firebase\n      const pushID = chatrooms.child(this.state.roomName).push(messageObject);\n      // update the firebase key with variable pushID\n      messageObject.userFirebaseKey = pushID.key;\n      chatrooms.child(this.state.roomName).child(pushID.key).update(messageObject);\n      // empty state ready for the next user message\n      this.setState({\n        userInput: '',\n        currentTime: '',\n        userFirebaseKey: '',\n      })\n    }\n    let element = document.querySelector('.lastMessage');\n    setTimeout(function () {\n      element.scrollIntoView();\n    }, 100);\n  }\n\n  removeMessage = (event) => {\n    // pull the firebase chatroom necessary\n    const chatrooms = firebase.database().ref('chatrooms');\n    // compare current username vs. username held in class on the event clicked on (see total messages span)\n    if (this.state.userName === event.target.className)\n    // if they are the same, then go into database and find the clicked on message's firebase key. In this firebase key area of your database, delete it\n    {\n      chatrooms.child(this.state.roomName).child(event.target.id).remove();\n    }\n    // else alert the user that they can't delete other people's messages\n    else {\n      alert(`You can only delete your own messages`)\n    }\n  }\n\n  // the sign out button. If clicked, it resets all the state which returns users to the landing page\n  goBackToStart = (e) => {\n    e.preventDefault();\n    this.setState({\n      clicked: false,\n      messageList: [],\n      userInput: '',\n      userInput2: '',\n      userName: 'Tom',\n      userPW: '',\n      currentTime: '',\n      userFirebaseKey: '',\n      publicJoin: false,\n      privateJoin: false,\n      privateCreate: false,\n      switchSign: 'Sign up',\n      stop: false,\n      userSignedIn: false,\n      roomName: 'publicRoom',\n      pastRoomNames: [],\n      rightText: 'rightText',\n    })\n    localStorage.clear()\n  }\n\n  // 2nd PAGE (USER SIGNED INTO THE HUB) FUNCTIONALITY\n\n  // create a room functionality\n  createRoom = (e) => {\n    e.preventDefault();\n    let roomName = this.state.userInput;\n\n    // pull database\n    const chatrooms = firebase.database().ref('chatrooms');\n    chatrooms.on('value', (chatrooms) => {\n      let chatroomsCleaned = chatrooms.val();\n\n      for (let chatroom in chatroomsCleaned) {\n        // create a barrier for running the function if the chatroom name already exists\n        if (chatroom.toString() == roomName.toString()) {\n          this.setState({\n            stop: true,\n          })\n        }\n      }\n\n    })\n\n    setTimeout(() => {\n      // only run if user has input both text fields \n      if (roomName === '') {\n        alert('please fill a room name')\n      }\n      // only run it if the stop status set above is set to false\n      else if (this.state.stop === true) {\n        alert('sorry someone already has that room name. Try again.')\n        this.setState({\n          stop: false,\n        })\n      }\n      // create a room object ready to be pushed to database\n      else {\n        // remove push as not as clean a database\n        let template = '0';\n        const chatRoomObject = {\n          [roomName]: {\n            [template]: {\n              userID: \"Chattr Bot\",\n              userMessage: \"Start chat below\",\n            }\n          }\n        }\n        // push it to the database\n        chatrooms.update(chatRoomObject);\n        this.setState({\n          roomName: roomName,\n          userInput: '',\n          privateCreate: true,\n        })\n        // run the group chat start function but with the details of created room above\n        let name = this.state.userName;\n        this.groupChatStart(name);\n      }\n    }, 300);\n  }\n\n  // if in an existing room, run a function before join room, to make sure we join the room clicked on in the side bar of the public chat page\n  switchRoom = (e) => {\n    this.setState({\n      userInput: e.target.id,\n    });\n    setTimeout(() => {\n      this.joinRoom()\n    }, 300);\n  }\n\n  // similar to the create a room funciton. However, only allow the state to be updated to room details if the room input exists\n  joinRoom = (e) => {\n    if (e) {\n      e.preventDefault();\n    }\n    let roomName = this.state.userInput;\n\n    // pull database\n    const chatrooms = firebase.database().ref('chatrooms');\n    chatrooms.on('value', (chatrooms) => {\n      let chatroomsCleaned = chatrooms.val();\n      let matchOnce = [];\n      // if room name input by user === chatroom in database then carry on, if not then stop\n      for (let chatroom in chatroomsCleaned) {\n        if (chatroom.toString() == roomName.toString()) {\n          matchOnce.push('match')\n        } else {\n        }\n      }\n      // based on above conditional either set stop to true of false\n      if (matchOnce.length > 0) {\n        this.setState({\n          stop: false,\n        })\n      } else {\n        this.setState({\n          stop: true,\n        })\n      }\n    })\n    // give the time for set state stop to run above\n    setTimeout(() => {\n      // only run if user has input both text fields\n      if (roomName === '') {\n        alert('please fill a room name')\n      }\n      // update the roomName to userInput if exists\n      // only run it if the stop status set above is set to false\n      else if (this.state.stop === false) {\n        this.setState({\n          roomName: roomName,\n          userInput: '',\n          privateJoin: true,\n        })\n        let name = this.state.userName\n        this.groupChatStart(name);\n      } // if no rooms matched, throw an alert\n      else {\n        alert('sorry there are no room names with that title. Try again.')\n\n      }\n\n    }, 500);\n\n  }\n\n  // a very tricky function> I had to check all the chatrooms for activity by the user. If the user had had past activity, these are appended to the page, and allow user to jump between rooms\n  findRoomsUserIsIn = () => {\n    const dbRef = firebase.database().ref();\n    // pull and clean the firebase objects into array of objects that can be iterated through\n    dbRef.on('value', (data) => {\n      let chatroomsArray = [];\n      let finalRoomsArray = [];\n      let usersAndRooms = data.val();\n      for (let rooms in usersAndRooms) {\n        chatroomsArray.push(usersAndRooms[rooms])\n      }\n      // then next loops together. In short, we want to delve into every message in our database and compare the sender to the current user. \n      // For any message the current user has sent, store the room that it was sent in our state\n      for (let roomName in chatroomsArray[0]) {\n\n        for (let messages in chatroomsArray[0][roomName]) {\n\n          if (chatroomsArray[0][roomName][messages].userID.includes(this.state.userName.toLowerCase())) {\n            finalRoomsArray.push(roomName)\n          }\n        }\n      }\n      // filter duplicates from array so only unique rooms left\n      let cleanedFinalArray = [...new Set(finalRoomsArray)]\n\n      // if array is short show that they haven't had activity\n      if (cleanedFinalArray.length === 0) {\n        this.setState({\n          pastRoomNames: [`You haven't chatted in other rooms rooms yet`]\n        })\n      }\n      // if only guest activity, show this\n      else if (cleanedFinalArray[0] === 'publicRoom') {\n        this.setState({\n          pastRoomNames: [`Only chatted as a guest`]\n        })\n      }\n      // otherwise pass the rooms the user has had activity in\n      else if (cleanedFinalArray.length > 0) {\n        this.setState({\n          pastRoomNames: cleanedFinalArray,\n        })\n      }\n\n    })\n  }\n\n  // final render function\n  // What page is shown to the user is based on conditionals. \n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          // If public join is true, create a public chat room as a guest\n          this.state.publicJoin\n            ?\n            <PublicChat rightText={this.state.rightText} switchRoom={this.switchRoom} pastRoomNames={this.state.pastRoomNames} userName={this.state.userName} statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} removeMessage={this.removeMessage} goBackToStart={this.goBackToStart} />\n            // If user not signed in or publicly joined, show the landing page\n            :\n            (!this.state.userSignedIn\n              ?\n              <LandingPage publicJoin={this.adjustPublicJoinStatus} handleChange={this.handleChange} signUpOrLogin={this.signUpOrLogin} switchSign={this.switchSign} signOrLogin={this.state.switchSign} scrollDown={this.scrollDown} />\n              :\n              // if private room created, create a private chat room\n\n              (this.state.privateCreate\n                ?\n                <PublicChat rightText={this.state.rightText} switchRoom={this.switchRoom} pastRoomNames={this.state.pastRoomNames} userName={this.state.userName} statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} removeMessage={this.removeMessage} goBackToStart={this.goBackToStart} />\n                :\n                // if private room joined, join a private chat room\n\n                (this.state.privateJoin\n                  ?\n                  <PublicChat rightText={this.state.rightText} switchRoom={this.switchRoom} pastRoomNames={this.state.pastRoomNames} userName={this.state.userName} statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} removeMessage={this.removeMessage} goBackToStart={this.goBackToStart} />\n                  :\n                  <RoomPage pastRoomNames={this.state.pastRoomNames} goBackToStart={this.goBackToStart} scrollDown={this.scrollDown} handleChange={this.handleChange} createRoom={this.createRoom} joinRoom={this.joinRoom} userName={this.state.userName} />\n\n                )\n\n\n              )\n            )\n        }\n\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}